swagger: "2.0"
info:
  description: "This is an official documentation for the Díky 2020 project by František Soudek. You can find here well-described API endpoints, parameters, responses and so on. I hope it is clean and simple and you'll find everything what you'll be searching for."
  version: "1.0.0"
  title: "Díky 2020"
  contact:
    email: "jan.svabik@noltio.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "diky2020.noltio.com"
basePath: "/"
tags:
- name: "Basic data"
  description: "Donations and thanks counter"
- name: "Thanks"
  description: "Endpoints withing the Thanks data"
- name: "Donations (Donio)"
  description: "Endpoints for Donio connection"
schemes:
- "https"
paths:
  /welcome:
    get:
      tags:
      - "Basic data"
      summary: "Get basic homepage data"
      description: "This endpoint provides you the number of thanks in database and the total amount of all successfull donations."
      operationId: "getWelcome"
      produces:
      - "application/json"
      responses:
        "200":
          description: "You've got the data! Use them simply!"
          schema:
            $ref: "#/definitions/Donation"
        "400":
          description: "Invalid status value"
  /thanks:
    get:
      tags:
      - "Thanks"
      summary: "Get specified page of thanks from database"
      description: ""
      operationId: "getThanks"
      parameters:
      - name: "perPage"
        description: "The number of results per one page"
        in: "query"
        default: 8
        type: "number"
      - name: "sortBy"
        description: "The field name to sort by"
        in: "query"
        default: "time"
        type: "string"
        enum:
        - "likes"
        - "time"
      - name: "sortType"
        description: "The field name to sort by"
        default: "desc"
        in: "query"
        type: "string"
        enum:
        - "asc"
        - "desc"
      produces:
      - "application/json"
      responses:
        "200":
          description: "You've got the data! Use them simply!"
          schema:
            $ref: "#/definitions/ThanksResponse"
        "400":
          description: "Invalid request"
    post:
      tags:
      - "Thanks"
      summary: "Save new thanks to database"
      description: ""
      operationId: "postThanks"
      parameters:
      - name: "body"
        description: "Body data"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/ThanksRequest'
      produces:
      - "application/json"
      responses:
        "200":
          description: "New thanks was saved successfully!"
          schema:
            $ref: "#/definitions/OKResponse"
  /thanks/{page}:
    get:
      tags:
      - "Thanks"
      summary: "Get specified page of thanks from database"
      description: ""
      operationId: "getThanksPage"
      parameters:
      - name: "page"
        description: "The number of page to display"
        in: "path"
        type: "number"
        required: true
      - name: "perPage"
        description: "The number of results per one page"
        in: "query"
        default: 8
        type: "number"
      - name: "sortBy"
        description: "The field name to sort by"
        in: "query"
        default: "time"
        type: "string"
        enum:
        - "likes"
        - "time"
      - name: "sortType"
        description: "The field name to sort by"
        default: "desc"
        in: "query"
        type: "string"
        enum:
        - "asc"
        - "desc"
      produces:
      - "application/json"
      responses:
        "200":
          description: "You've got the data! Use them simply!"
          schema:
            $ref: "#/definitions/ThanksResponse"
        "400":
          description: "Invalid request"
  /thanks/{thanksId}/likes:
    post:
      tags:
      - "Thanks"
      summary: "Increment the number of likes for the thanks"
      description: "This endpoint increments the number of likes for the specified thanks by 1. There is no security layer behind this endpoint so be aware of that."
      parameters:
      - name: "thanksId"
        type: "string"
        in: "path"
        required: true
      responses:
        "200":
          description: "New thanks was saved successfully!"
          schema:
            $ref: "#/definitions/OKResponse"
  /thanks/{thanksId}/donation:
    post:
      tags:
      - "Donations (Donio)"
      summary: "Save donation to the specified thanks"
      description: "This endpoint allows Donio website/backend to save a donation data to the specified thanks in URL parameter thanksID. It is secured by validationToken."
      parameters:
      - name: "thanksId"
        type: "string"
        in: "path"
        required: true
      - name: "body"
        description: "Body data"
        in: "body"
        required: true
        schema:
          type: "object"
          required:
          - "validationToken"
          - "amount"
          - "target"
          properties:
            validationToken:
              type: "string"
              description: "Unique security token for allowing the entire connection"
              example: "/JCt+etx%=DJ.M(Q>KyET}7AL&k9\"{.-"
            amount:
              type: "number"
              description: "The donated amount of money"
              example: 2500
            target:
              type: "number"
              description: "Unique Donio ID of the donated project."
              example: 385
      responses:
        "200":
          description: "Donation was saved!"
          schema:
            $ref: '#/definitions/OKResponse'
definitions:
  ThanksResponse:
    type: "object"
    properties:
      status:
        type: "string"
        format: "string"
        example: "OK"
        enum:
        - "OK"
      msg:
        type: "string"
        format: "string"
        example: "Požadavek byl úspěšně zpracován."
      data:
        type: "object"
        properties:
          _last:
            type: "boolean"
            format: "bool"
            example: false
          _next:
            type: "string"
            format: "string"
            example: "/3/?perPage=8&sortBy=likes&sortType=asc"
          results:
            type: "array"
            items:
              $ref: "#/definitions/ThanksResults"
  OKResponse:
    type: "object"
    properties:
      status:
        type: "string"
        format: "string"
        example: "OK"
        enum:
        - "OK"
      msg:
        type: "string"
        format: "string"
        example: "Požadavek byl úspěšně zpracován."
      data:
        $ref: "#/definitions/ThanksResults"
  ThanksResults:
    type: "object"
    properties:
      id:
        type: "string"
        format: "string"
        example: "5fd7b4585609eed095084d95"
      name:
        type: "string"
        example: "František"
      addressee:
        type: "string"
        example: "bráchovi"
      text:
        type: "string"
        example: "Brácho,\n\ndíky moc, že jsi se mnou po celý rok byl a že jsi mi pomohl vše zvládnout a přestát."
      time:
        type: "string"
        format: "date-time"
      likes:
        type: "number"
        description: "The number of likes given by users"
        example: 824
      donation:
        type: "object"
        properties:
          target:
            type: "string"
            example: "matkám samoživitelkám"
          amount:
            type: "number"
            example: 4000
    xml:
      name: "Welcome"
  Donation:
    type: "object"
    properties:
      status:
        type: "string"
        format: "string"
        example: "OK"
        enum:
        - "OK"
      msg:
        type: "string"
        format: "string"
        example: "Požadavek byl úspěšně zpracován."
      data:
        type: "object"
        format: "object"
        properties:
          donated:
            type: "integer"
            format: "int32"
            example: 333592
          totalThanks:
            type: "integer"
            format: "int32"
            example: 2959
  ThanksRequest:
    type: "object"
    required:
    - "name"
    - "addressee"
    - "text"
    properties:
      name:
        type: "string"
        description: "asf"
        example: "František"
      addressee:
        type: "string"
        description: ""
        example: "bratrovi"
      text:
        type: "string"
        example: "Brácho,\n\ndíky moc, že jsi se mnou po celý rok byl."
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
